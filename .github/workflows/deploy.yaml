name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_NAME: "springbootrest"
  IMAGE_NAME: "ghcr.io/nachikul/springbootrest"
  CHART_PATH: "./helm/springbootrest" # Relative path to the local Helm chart
  KUBECONFIG_PATH: "~/.kube/config"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: myenv
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build Application
      run: |
        echo "Building the application using Maven..."
        ./mvnw clean package -DskipTests

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Setup Minikube
      uses: manusa/actions-setup-minikube@v2.13.0
      with:
        minikube version: 'v1.34.0'
        kubernetes version: 'v1.31.1'
        driver: 'docker'

    - name: Set docker daemon to point to minikube
      run: |
        echo "Setting up Docker daemon to point to Minikube..."
        eval $(minikube -p minikube docker-env)

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.ACCESS_TOKEN }}

    - name: Set docker daemon to point to minikube
      run: |
        echo "Setting up Docker daemon to point to Minikube..."
        minikube ssh "docker login ghcr.io -u nachikul -p ${{ secrets.ACCESS_TOKEN }}"


    - name: Docker Build & Load to Minikube
      run: |
        echo "Building Docker image and loading it into Minikube..."
        docker build -t ${APP_NAME}:latest .
        docker tag ${APP_NAME}:latest ${IMAGE_NAME}:${{ github.event.inputs.IMAGE_TAG || 'latest' }}
        docker push ${IMAGE_NAME}:${{ github.event.inputs.IMAGE_TAG || 'latest' }}
        kubectl create secret docker-registry ghcr-secret \
        --docker-server=ghcr.io \
        --docker-username=nachikul \
        --docker-password=${{ secrets.ACCESS_TOKEN }} \
        --docker-email=nachikul1993@gmail.com

    - name: Run mysql deployment
      run: |
        cd mysql-local-k8s
        docker pull mysql:8.0
        bash deploy-mysql-k8s.sh

    - name: Helm Uninstall (Optional Cleanup)
      run: |
        echo "Uninstalling old Helm release if exists..."
        helm uninstall ${APP_NAME} --namespace default || true

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.6

    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        echo "Running Terraform plan..."
        cd terraform
        terraform plan \
          -var "name=${APP_NAME}" \
          -var "image=${APP_NAME}" \
          -var "kubeconfig_path=${KUBECONFIG_PATH}"

    - name: Terraform Apply
      run: |
        echo "Applying Terraform changes..."
        cd terraform
        timeout 30 terraform apply -auto-approve \
          -var "name=${APP_NAME}" \
          -var "image=${APP_NAME}" \
          -var "kubeconfig_path=${KUBECONFIG_PATH}" &
        sleep 30

    - name: Check pod deployment
      run: |
        kubectl get pods
        kubectl describe pod $(kubectl get pods --no-headers -o custom-columns=":metadata.name" | grep ^springbootrest)

    - name: Port forward Springboot Service
      run: |
        echo "Port forwarding the Springboot service..."
        kubectl port-forward svc/springbootrest 8080:8080 &

    - name: Testing Curl Command
      run: |
        curl http://127.0.0.1:8080/user?id=1
        curl http://127.0.0.1:8080/user -H "Content-Type: application/json" -d '{"name":"testuser"}'
        curl http://127.0.0.1:8080/user?id=2